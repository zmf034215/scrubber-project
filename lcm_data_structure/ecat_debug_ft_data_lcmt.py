"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ecat_debug_ft_data_lcmt(object):
    __slots__ = ["original_Fx", "original_Fy", "original_Fz", "original_Mx", "original_My", "original_Mz"]

    __typenames__ = ["double", "double", "double", "double", "double", "double"]

    __dimensions__ = [[1], [1], [1], [1], [1], [1]]

    def __init__(self):
        self.original_Fx = [ 0.0 for dim0 in range(1) ]
        self.original_Fy = [ 0.0 for dim0 in range(1) ]
        self.original_Fz = [ 0.0 for dim0 in range(1) ]
        self.original_Mx = [ 0.0 for dim0 in range(1) ]
        self.original_My = [ 0.0 for dim0 in range(1) ]
        self.original_Mz = [ 0.0 for dim0 in range(1) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ecat_debug_ft_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>1d', *self.original_Fx[:1]))
        buf.write(struct.pack('>1d', *self.original_Fy[:1]))
        buf.write(struct.pack('>1d', *self.original_Fz[:1]))
        buf.write(struct.pack('>1d', *self.original_Mx[:1]))
        buf.write(struct.pack('>1d', *self.original_My[:1]))
        buf.write(struct.pack('>1d', *self.original_Mz[:1]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ecat_debug_ft_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ecat_debug_ft_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ecat_debug_ft_data_lcmt()
        self.original_Fx = struct.unpack('>1d', buf.read(8))
        self.original_Fy = struct.unpack('>1d', buf.read(8))
        self.original_Fz = struct.unpack('>1d', buf.read(8))
        self.original_Mx = struct.unpack('>1d', buf.read(8))
        self.original_My = struct.unpack('>1d', buf.read(8))
        self.original_Mz = struct.unpack('>1d', buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ecat_debug_ft_data_lcmt in parents: return 0
        tmphash = (0x8f5ad021bbcf5a37) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ecat_debug_ft_data_lcmt._packed_fingerprint is None:
            ecat_debug_ft_data_lcmt._packed_fingerprint = struct.pack(">Q", ecat_debug_ft_data_lcmt._get_hash_recursive([]))
        return ecat_debug_ft_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

