"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class upper_body_cmd_package(object):
    __slots__ = ["isUsed", "control_mode", "jointPosVec", "jointSpeedVec", "jointCurrentVec", "jointTorqueVec", "jointKp", "jointKd", "body_yaw"]

    __typenames__ = ["int32_t", "int32_t", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, [30], [30], [30], [30], [30], [30], [30], None]

    def __init__(self):
        self.isUsed = 0
        self.control_mode = [ 0 for dim0 in range(30) ]
        self.jointPosVec = [ 0.0 for dim0 in range(30) ]
        self.jointSpeedVec = [ 0.0 for dim0 in range(30) ]
        self.jointCurrentVec = [ 0.0 for dim0 in range(30) ]
        self.jointTorqueVec = [ 0.0 for dim0 in range(30) ]
        self.jointKp = [ 0.0 for dim0 in range(30) ]
        self.jointKd = [ 0.0 for dim0 in range(30) ]
        self.body_yaw = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(upper_body_cmd_package._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.isUsed))
        buf.write(struct.pack('>30i', *self.control_mode[:30]))
        buf.write(struct.pack('>30f', *self.jointPosVec[:30]))
        buf.write(struct.pack('>30f', *self.jointSpeedVec[:30]))
        buf.write(struct.pack('>30f', *self.jointCurrentVec[:30]))
        buf.write(struct.pack('>30f', *self.jointTorqueVec[:30]))
        buf.write(struct.pack('>30f', *self.jointKp[:30]))
        buf.write(struct.pack('>30f', *self.jointKd[:30]))
        buf.write(struct.pack(">f", self.body_yaw))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != upper_body_cmd_package._get_packed_fingerprint():
            raise ValueError("Decode error")
        return upper_body_cmd_package._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = upper_body_cmd_package()
        self.isUsed = struct.unpack(">i", buf.read(4))[0]
        self.control_mode = struct.unpack('>30i', buf.read(120))
        self.jointPosVec = struct.unpack('>30f', buf.read(120))
        self.jointSpeedVec = struct.unpack('>30f', buf.read(120))
        self.jointCurrentVec = struct.unpack('>30f', buf.read(120))
        self.jointTorqueVec = struct.unpack('>30f', buf.read(120))
        self.jointKp = struct.unpack('>30f', buf.read(120))
        self.jointKd = struct.unpack('>30f', buf.read(120))
        self.body_yaw = struct.unpack(">f", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if upper_body_cmd_package in parents: return 0
        tmphash = (0xddda39c528728c10) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if upper_body_cmd_package._packed_fingerprint is None:
            upper_body_cmd_package._packed_fingerprint = struct.pack(">Q", upper_body_cmd_package._get_hash_recursive([]))
        return upper_body_cmd_package._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

